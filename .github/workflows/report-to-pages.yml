# This workflow will build and push a Java application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-java?tabs=javase&pivots=platform-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the JAVA_VERSION environment variable below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and run tests with results at https://apetrovskiy.github.io/kotlin-decorators/

env:
  AZURE_WEBAPP_NAME: your-app-name # set this to the name of your Azure Web App
  JAVA_VERSION: "11" # set this to the Java version to use
  DISTRIBUTION: zulu # set this to the Java distribution

on:
  push:
    branches: ["develop"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Java version
        uses: actions/setup-java@v3.0.0
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.DISTRIBUTION }}
          # cache: "maven"

      # - name: Build with Maven
      #   run: mvn clean install
      # - name: Gradle wrapper
      #   if: always()
      #   run: gradle wrapper
      # - name: Print Gradle version
      #   if: always()
      #   run: gradle --version
      # - name: Grant execute permission for gradlew
      #   if: always()
      #   run: chmod +x gradlew
      - name: Build with Gradle
        if: always()
        run: ./gradlew build --warning-mode all

      # - name: Look at Allure
      #   if: always()
      #   uses: ./.github/actions/allure-show

      # TODO: de-duplicate
      - name: Archive Allure results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: allure-results
          path: build/allure-results

  allure:
    runs-on: ubuntu-latest
    if: always()
    needs:
      - build
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2

      - name: Get Allure history
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Allure Report with history
        uses: simple-elf/allure-report-action@v1.5
        if: always()

      - name: Allure Report action from marketplace
        uses: simple-elf/allure-report-action@master
        if: always()
        #id: allure-report
        with:
          allure_results: allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history
          keep_reports: 50

      - name: Deploy report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        env:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: allure-history
